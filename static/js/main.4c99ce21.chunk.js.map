{"version":3,"sources":["components/CountryItem.js","components/CountryStats.js","components/Pagination.js","components/WorldStats.js","components/App.js","serviceWorker.js","index.js"],"names":["CountryItem","this","props","country","confirmed","className","recovered","deaths","newConfirmed","newRecovered","newDead","Component","CountryStats","countries","map","key","Slug","TotalConfirmed","TotalRecovered","TotalDeaths","NewConfirmed","NewRecovered","NewDeaths","Pagination","totalRecords","recordsPerPage","paginate","PageNumbers","i","Math","ceil","push","id","aria-label","number","href","onClick","WorldStats","App","pageNumber","setState","currentPage","state","isLoaded","error","global","bind","fetch","then","res","json","result","Global","Countries","indexOfLastRecord","indexOfFirstRecord","currentRecords","slice","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4c99ce21.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class CountryItem extends Component {\r\n    render() {\r\n        return (\r\n                <tr>\r\n                    <td>{this.props.country}</td>\r\n                    <td>{this.props.confirmed}</td>\r\n                    <td className=\"green-text\">{this.props.recovered}</td>\r\n                    <td className=\"red-text\">{this.props.deaths}</td>\r\n                    <td>{this.props.newConfirmed}</td>\r\n                    <td>{this.props.newRecovered}</td>\r\n                    <td>{this.props.newDead}</td>\r\n                </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryItem\r\n","import React, { Component } from 'react';\r\nimport CountryItem from './CountryItem';\r\n\r\nexport class CountryStats extends Component {\r\n    render() {\r\n        const countries = this.props.countries;\r\n        return (\r\n            <table className=\"table table-striped table-bordered\"> \r\n                <thead>\r\n                    <tr>\r\n                      <th>Country</th>\r\n                      <th>Confirmed</th>\r\n                      <th>Recovered</th>\r\n                      <th>Deaths</th>\r\n                      <th>New Confirmed</th>\r\n                      <th>New Recovered</th>\r\n                      <th>New Deaths</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {countries.map(country => (\r\n                        <CountryItem key={country.Slug} country={country.Slug} confirmed={country.TotalConfirmed} recovered={country.TotalRecovered} deaths={country.TotalDeaths} newConfirmed={country.NewConfirmed} newRecovered={country.NewRecovered} newDead={country.NewDeaths}/>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryStats\r\n","import React from 'react'\r\n\r\nexport default function Pagination({totalRecords, recordsPerPage, paginate}) {\r\n\r\n    const PageNumbers = [];\r\n\r\n    for(let i = 1; i <= Math.ceil(totalRecords / recordsPerPage); i++){\r\n        PageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <nav id=\"table-footer\" aria-label=\"Page navigation\">\r\n            <ul className=\"pagination\">\r\n                {PageNumbers.map(number => (\r\n                    <li key={number} className=\"page-item\">\r\n                        <a href=\"!#\" className=\"page-link\" onClick={()=> paginate(number)}>{number}</a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport class WorldStats extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"world-container\">\r\n                <div id=\"confirmed\">{this.props.confirmed}</div>\r\n                <div id=\"recovered\">{this.props.recovered}</div>\r\n                <div id=\"deaths\">{this.props.deaths}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WorldStats\r\n","import React, { Component } from 'react'\nimport CountryStats from './CountryStats';\nimport Pagination from './Pagination';\nimport WorldStats from './WorldStats';\nimport '../App.css';\n\n\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n        isLoaded: false,\n        error:null,\n        currentPage:1,\n        recordsPerPage:10,\n        global:\"\",\n        countries: []\n    }\n\n    this.paginate = this.paginate.bind(this);\n  }\n  \n  paginate = (pageNumber) => {\n    this.setState({\n      currentPage: pageNumber\n    });\n  }\n\n\n  componentDidMount(){\n    fetch('https://api.covid19api.com/summary')\n    .then(res => res.json())\n    .then( (result) => {\n      this.setState({\n        isLoaded:true,\n        global: result.Global,\n        countries: result.Countries\n      });\n      },\n      //handle errors from the fetch statement\n      (error) => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      }\n    )\n  }\n\n\n\n  render() {\n    const {isLoaded, error, currentPage, recordsPerPage, global, countries} = this.state;\n    if(error){\n      return (\n        <div>\n          <h1>Oops! Something's wrong apparently.</h1>\n          {/* <Error message=error.message/>*/}\n        </div>\n        )\n    }\n    else if(!isLoaded){\n      return (\n        <div id=\"app\">\n          <div id=\"header\"></div>\n          <section className=\"main\">\n\n            <section className=\"stats\">\n              <section className=\"world-stats\"></section>\n              <section className=\"country-stats\">\n                <h2>Country Breakdown</h2>\n                <div id=\"form\"></div>\n                <div id=\"table\"></div>\n              </section>\n            </section>\n          </section>\n\n        </div>\n      )\n    }\n    else{\n      //Get current posts\n      const indexOfLastRecord = currentPage * recordsPerPage;\n      const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;\n      const currentRecords = countries.slice(indexOfFirstRecord,indexOfLastRecord);\n\n      return (\n        <div id=\"app\">\n\n          <header>\n            <h1>Welcome to COVID Alert!</h1>\n            <h3>Daily accurate numbers of the spread of the Coronavirus around the world.</h3>\n          </header>\n\n          <section id=\"main\">\n\n            <section id=\"world-stats\">\n                <h2>World Stats</h2>\n                <WorldStats confirmed={global.TotalConfirmed} recovered={global.TotalRecovered} deaths={global.TotalDeaths} /> \n            </section>\n\n            <section id=\"stats\">\n\n              <section id=\"country-stats\">\n\n                <h2>Country Breakdown</h2>\n\n                <form></form>\n          \n                <CountryStats countries={currentRecords} />\n                <Pagination totalRecords={countries.length} recordsPerPage={recordsPerPage} paginate={this.paginate}/>\n                \n              </section>\n            </section>\n          </section>\n      \n        </div>\n      )\n    }\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}